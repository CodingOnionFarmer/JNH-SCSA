# 아이디어 구상 : 처음(index 0번)부터 x1까지, 또는 y1까지의 누적 합을 구해 두는 건 쉽다.
# 하지만 중간부터 중간까지의 누적 합은 조금 더 어려운데, 그나마 좀 더 쉬운 1차원 누적 합을 먼저 생각하고 확장해 본다.

# 1차원 누적 합을 이용해 x1부터 x2까지의 합을 구하려면, 미리 구해 둔 0부터 x2까지의 누적 합에서 0부터 (x1-1)까지의 누적 합을 빼면 된다.
# 2차원이면 조금 더 복잡한데, 3,4부터 5,6까지의 합을 구한다고 예를 들면 아래와 같다.

#   0123456  <- 폰트에 따라 indent가 안 맞을 수도 있음
# 0 □□□□□□□
# 1 □□□□□□□
# 2 □□□■■■□
# 3 □□□■■■□
# 4 □□□■■■□
# 5 □□□□□□□

# 색칠한 부분이 구하고자 하는 합이다.
# 그리고 누적 합을 구하는 방식에 따르면, O(n)으로 쉽게 구해 둘 수 있는 건
# 2차원 배열의 [0][0]을 맨 왼쪽 위 칸으로(문제에서는 0,0이 아니라 1,1로 주므로 유의) 하는 직사각형 형태의 누적 합이다.
# 그러므로, (0,0)부터 (4,5)까지 직사각형 영역(5x6 = 30칸)의 누적 합에서, 위쪽 2줄인 (2x6 = 12칸)의 누적 합을 빼고,
# 왼쪽 3줄인 (5x3 = 15칸)의 누적 합도 빼 준다.
# 그러고 나면, (0,0)부터 (1,2)까지의 (2x3 = 6칸) 영역의 누적 합은 중복해서 빼졌으므로, 한 번 더해 준다.
# (포함 배제의 원리)

# ---------------------------------

import sys

import os, io, sys

input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline
# 누군가의 팁 (sys.stdin.readline보다 빠르다고함)

n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]

# n*m 이중 리스트를 따로 만들어서 저장하는 게 일반적이나, 사실 board 자체를 변경하면서 저장해도 된다.
# prefix_sum = [[0] * n for _ in range(n)] 처럼 만들고 누적 합은 여기에 저장할 수도 있다.

# 행 우선 탐색으로 먼저 돌아서, 각 행의 누적 합을 계산해 둔다.
for i in range(n):
    # 누적 합을 저장할 변수 s = 0을 여기서 선언하고 board[i][j]를 더해주면서 저장해 나가도 되지만, 변수 지정 없이도 가능하다.
    for j in range(1, n):  # 첫 항은 그 자체로 누적 합이므로 안 해도 된다. 그리고 0부터 하면 예외처리가 귀찮다.
        board[i][j] += board[i][j - 1]
    board[i].append(0)  # 이걸 왜 하는지는 후에 설명

# 열 우선 탐색으로 해당 칸을 맨 오른쪽 밑으로 하는 직사각형 범위의 누적 합을 계산한다.
for j in range(n):
    for i in range(1, n):
        board[i][j] += board[i - 1][j]
        # 여기까지 처리해 두면, board[i][j]는 (i,j)까지의 2차원 누적 합이 된다.
board.append([0] * (n + 1))  # 이것도 후에 설명

ans = []

for _ in range(m):
    x1, y1, x2, y2 = map(int, input().split())
    x1 -= 2
    y1 -= 2  # 얘네는 2씩 빼야 됨에 주의
    # 여기까지 코드를 짜고 실행해 보면 x1이나 y1이 1일 때 문제가 생김을 알 수 있다.
    # 빼야 될 직사각형 영역의 너비나 높이가 0인데, 이러면 index가 -1까지 내려가기 때문
    # 따라서 여기서 if문으로 조건을 갈라서 ans를 뽑을 수도 있지만, 그게 귀찮아서 index -1인 곳을 전부 0으로 칠해준다.
    # (위에서 후에 설명한다고 한 부분)
    x2 -= 1
    y2 -= 1
    ans.append(board[x2][y2] - board[x1][y2] - board[x2][y1] + board[x1][y1])

print(*ans, sep='\n')
